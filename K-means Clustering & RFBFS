# calculate k using python, with the elbow method
inertia = []

# define our possible k values
possible_K_values = [i for i in range(2,40)]

# we start with 2, as we can not have 0 clusters in k means, and 1 cluster is just a dataset

# iterate through each of our values
for each_value in possible_K_values:

    # iterate through, taking each value from
    model = KMeans(n_clusters=each_value, init='k-means++',random_state=32)

    # fit it on YOUR dataframe
    model.fit(df_orig)

    # append the inertia to our array
    inertia.append(model.inertia_)

plt.plot(possible_K_values, inertia)
plt.title('The Elbow Method')

plt.xlabel('Number of Clusters')

plt.ylabel('Inertia')

plt.show()

# new model
model = KMeans(n_clusters=15, init='k-means++',random_state=32)

# re-fit our model
model.fit(scaled_df)

# compute an average silhouette score for each point
silhouette_score_average = silhouette_score(scaled_df, model.predict(scaled_df))

# lets see what that score it
print(silhouette_score_average)

# while that's nice, what does that tell us? there could still be a points with a negative value

# let's see the points
silhouette_score_individual = silhouette_samples(scaled_df, model.predict(scaled_df))


# iterate through to find any negative values
for each_value in silhouette_score_individual:
    if each_value < 0:
       print(f'We have found a negative silhouette score: {each_value}')

# re-do our loop, try to find values with no negative scores, or one with the least!!
bad_k_values = {}

possible_K_values = [i for i in range(5,20)]

# iterate through each of our values
for each_value in possible_K_values:

    # iterate through, taking each value from
    model = KMeans(n_clusters=each_value, init='k-means++',random_state=32)

    # fit it
    model.fit(scaled_df)

    # find each silhouette score
    silhouette_score_individual = silhouette_samples(scaled_df, model.predict(scaled_df))


    # iterate through to find any negative values
    for each_silhouette in silhouette_score_individual:

        # if we find a negative, lets start counting them
        if each_silhouette < 0:

            if each_value not in bad_k_values:
                bad_k_values[each_value] = 1

            else:
                bad_k_values[each_value] += 1

for key, val in bad_k_values.items():
    print(f' This Many Clusters: {key} | Number of Negative Values: {val}')

pca = PCA(2)
pca_np = pca.fit_transform(scaled_df)

kmeans7 = KMeans(n_clusters=5, init="k-means++", max_iter=500, n_init=10, random_state=40)
label7 = kmeans7.fit_predict(pca_np)
centroids7 = kmeans7.cluster_centers_
u_labels7 = np.unique(label7)

!git clone https://github.com/YousefGh/kmeans-feature-importance

cd "kmeans-feature-importance/"

from kmeans_interp.kmeans_feature_imp import KMeansInterp

KMeansInterp

kmeans = KMeansInterp(n_clusters=5, init="k-means++", max_iter=500, n_init=10, random_state=40,
                    ordered_feature_names=df_orig.columns.to_list(),
                    feature_importance_method='wcss_min').fit(scaled_df)

# Add the cluster labels to the dataframe:
# labels = pd.DataFrame({'Cluster':label7})
# labeledDF = pd.concat((imputed_df, labels), axis = 1)
# labeledDF

# labeledDF.to_csv('df_with_cluster.csv')

file = files.upload()

df_with_clusters = pd.read_csv("df_with_cluster.csv")

df_with_clusters = df_with_clusters.drop(columns=['Unnamed: 0'])
df_with_clusters

"""#Statistical analaysis of importance features in each Cluster"""

zero_cluster = kmeans.feature_importances_[0][:10]
zero_cluster

df_feat_importances_zero_cluster = df_with_clusters.loc[(df_with_clusters.Cluster==0),
       ['n_r_ecg_p_04','LID_S_n','ant_im', 'JELUD_TAH','n_r_ecg_p_03',
 'fibr_ter_02', 'LID_KB','lat_im','zab_leg_02','LET_IS']]

print(' ')
for i in list(df_feat_importances_zero_cluster.columns):
    print(df_feat_importances_zero_cluster[[i]].value_counts())
    print('--------------------------------------')
    print(' ')

"""first cluster"""

kmeans.feature_importances_[1][:10]

df_feat_importances_first_cluster = df_with_clusters.loc[(df_with_clusters.Cluster==1),
       ['DLIT_AG','GB','SEX','STENOK_AN','FK_STENOK','endocr_01','IBS_POST',
        'INF_ANAM']]

print(' ')
for i in list(df_feat_importances_first_cluster.columns):
    print(df_feat_importances_first_cluster[[i]].value_counts())
    print('--------------------------------------')
    print(' ')


num_feat_importances_first_cluster = df_with_clusters.loc[(df_with_clusters.Cluster==1),['AGE','S_AD_ORIT']]
num_feat_importances_first_cluster.describe()

"""Second Cluster"""

kmeans.feature_importances_[2][:10]

df_feat_importances_second_cluster = df_with_clusters.loc[(df_with_clusters.Cluster==2),
       ['K_SH_POST', 'ritm_ecg_p_04','n_p_ecg_p_06','ASP_S_n',
        'n_r_ecg_p_08','ritm_ecg_p_01','ANT_CA_S_n','n_p_ecg_p_05']]

print(' ')
for i in list(df_feat_importances_second_cluster.columns):
    print(df_feat_importances_second_cluster[[i]].value_counts())
    print('--------------------------------------')
    print(' ')


num_feat_importances_second_cluster = df_with_clusters.loc[(df_with_clusters.Cluster==2),['D_AD_ORIT','S_AD_ORIT']]
num_feat_importances_second_cluster.describe()

"""Third Cluster"""

kmeans.feature_importances_[3][:10]

df_feat_importances_third_cluster = df_with_clusters.loc[(df_with_clusters.Cluster==3),
       ['ritm_ecg_p_02','MP_TP_POST','n_r_ecg_p_05','n_r_ecg_p_06','nr_04',
       'ritm_ecg_p_01','nr_03','LET_IS','ZSN_A']]

print(' ')
for i in list(df_feat_importances_third_cluster.columns):
    print(df_feat_importances_third_cluster[[i]].value_counts())
    print('--------------------------------------')
    print(' ')


num_feat_importances_third_cluster = df_with_clusters.loc[(df_with_clusters.Cluster==3),['AGE']]
num_feat_importances_third_cluster.describe()

kmeans.feature_importances_[4][:10]

df_feat_importances_fourth_cluster = df_with_clusters.loc[(df_with_clusters.Cluster==4),
       ['SEX','FK_STENOK','STENOK_AN','DLIT_AG','GB','IBS_POST','ritm_ecg_p_01','endocr_01','INF_ANAM']]

print(' ')
for i in list(df_feat_importances_fourth_cluster.columns):
    print(df_feat_importances_fourth_cluster[[i]].value_counts())
    print('--------------------------------------')
    print(' ')


num_feat_importances_fourth_cluster = df_with_clusters.loc[(df_with_clusters.Cluster==4),['AGE']]
num_feat_importances_fourth_cluster.describe()

"""# RFBFS"""

x = df_orig.iloc[:,0:110]
x

y = df_orig.iloc[:,110:]
y

rf_for_feature_selection = RandomForestClassifier(n_estimators = 100 , random_state = 3)
sel = SelectFromModel(rf_for_feature_selection)
sel.fit(x, y)

selected_feat= x.columns[(sel.get_support())]
print(selected_feat)
print(sel.estimator_)
print(sel.threshold_)
print(sel.estimator_.feature_importances_)
sum(sel.estimator_.feature_importances_) / 111

len(selected_feat)

df_most_relevant = df_orig[['AGE', 'S_AD_ORIT', 'D_AD_ORIT', 'K_BLOOD', 'NA_BLOOD', 'ALT_BLOOD',
       'AST_BLOOD', 'L_BLOOD', 'ROE', 'INF_ANAM', 'STENOK_AN', 'FK_STENOK',
       'IBS_POST', 'GB', 'DLIT_AG', 'ZSN_A', 'endocr_01', 'O_L_POST',
       'K_SH_POST', 'ant_im', 'lat_im', 'inf_im', 'IM_PG_P', 'ritm_ecg_p_01',
       'n_p_ecg_p_12', 'TIME_B_S', 'NA_KB', 'NITR_S', 'NA_R_1_n', 'ANT_CA_S_n',
       'ASP_S_n', 'RAZRIV', 'ZSN', 'REC_IM']]
df_most_relevant

df_pca = pd.DataFrame(pca_np)
df_pca

df_pca_clusters = pd.concat([df_pca, df_with_clusters], axis=1)
df_pca_clusters

# hover_data_cols =
list_cols_df_with_clusters_clean = list(df_most_relevant.columns)[0:25]
list_cols_df_with_clusters_clean

fig = px.scatter(
        df_pca_clusters,
        x=0,
        y=1,
        color="Cluster",
        hover_data=list_cols_df_with_clusters_clean
      )
fig.show()

age_cluster = df_pca_clusters[["AGE","Cluster"]]
n_clusters = len(age_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("AGE", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(age_cluster['Cluster'].unique())):
    cluster = age_cluster[age_cluster['Cluster'] == label]['AGE']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("AGE")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

inf_cluster = df_pca_clusters[["INF_ANAM","Cluster"]]
n_clusters = len(inf_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("INF_ANAM", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(inf_cluster['Cluster'].unique())):
    cluster = inf_cluster[inf_cluster['Cluster'] == label]['INF_ANAM']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("INF_ANAM")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

stenok_cluster = df_pca_clusters[["STENOK_AN","Cluster"]]
n_clusters = len(stenok_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("STENOK_AN", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(stenok_cluster['Cluster'].unique())):
    cluster = stenok_cluster[stenok_cluster['Cluster'] == label]['STENOK_AN']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("STENOK_AN")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

fk_cluster = df_pca_clusters[["FK_STENOK","Cluster"]]
n_clusters = len(fk_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("FK_STENOK", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(fk_cluster['Cluster'].unique())):
    cluster = fk_cluster[fk_cluster['Cluster'] == label]['FK_STENOK']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("FK_STENOK")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

ibs_cluster = df_pca_clusters[["IBS_POST","Cluster"]]
n_clusters = len(ibs_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("IBS_POST", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(ibs_cluster['Cluster'].unique())):
    cluster = ibs_cluster[ibs_cluster['Cluster'] == label]['IBS_POST']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("IBS_POST")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

gb_cluster = df_pca_clusters[["GB","Cluster"]]
n_clusters = len(gb_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("GB", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(gb_cluster['Cluster'].unique())):
    cluster = gb_cluster[gb_cluster['Cluster'] == label]['GB']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("GB")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

dlit_cluster = df_pca_clusters[["DLIT_AG","Cluster"]]
n_clusters = len(dlit_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("DLIT_AG", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(dlit_cluster['Cluster'].unique())):
    cluster = dlit_cluster[dlit_cluster['Cluster'] == label]['DLIT_AG']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("DLIT_AG")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

zsn_cluster = df_pca_clusters[["ZSN_A","Cluster"]]
n_clusters = len(zsn_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("ZSN_A", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(zsn_cluster['Cluster'].unique())):
    cluster = zsn_cluster[zsn_cluster['Cluster'] == label]['ZSN_A']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("ZSN_A")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

sadorit_cluster = df_pca_clusters[["S_AD_ORIT","Cluster"]]
n_clusters = len(sadorit_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("S_AD_ORIT", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(sadorit_cluster['Cluster'].unique())):
    cluster = sadorit_cluster[sadorit_cluster['Cluster'] == label]['S_AD_ORIT']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("S_AD_ORIT")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

dadorit_cluster = df_pca_clusters[["D_AD_ORIT","Cluster"]]
n_clusters = len(dadorit_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("D_AD_ORIT", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(dadorit_cluster['Cluster'].unique())):
    cluster = dadorit_cluster[dadorit_cluster['Cluster'] == label]['D_AD_ORIT']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("D_AD_ORIT")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

kshpost_cluster = df_pca_clusters[["K_SH_POST","Cluster"]]
n_clusters = len(kshpost_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("K_SH_POST", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(kshpost_cluster['Cluster'].unique())):
    cluster = kshpost_cluster[kshpost_cluster['Cluster'] == label]['K_SH_POST']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("K_SH_POST")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

kshpost_cluster.loc[(kshpost_cluster.Cluster == 3)]

ant_cluster = df_pca_clusters[["ant_im","Cluster"]]
n_clusters = len(ant_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("ant_im", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(ant_cluster['Cluster'].unique())):
    cluster = ant_cluster[ant_cluster['Cluster'] == label]['ant_im']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("ant_im")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

lat_cluster = df_pca_clusters[["lat_im","Cluster"]]
n_clusters = len(lat_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("lat", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(lat_cluster['Cluster'].unique())):
    cluster = lat_cluster[lat_cluster['Cluster'] == label]['lat_im']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("lat_im")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

inf_im_cluster = df_pca_clusters[["inf_im","Cluster"]]
n_clusters = len(inf_im_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("inf_im", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(inf_im_cluster['Cluster'].unique())):
    cluster = inf_im_cluster[inf_im_cluster['Cluster'] == label]['inf_im']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("inf_im")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

# post_cluster = df_pca_clusters[["post_im","Cluster"]]
# n_clusters = len(post_cluster['Cluster'].unique())
# n_cols = int(np.ceil(np.sqrt(n_clusters)))
# n_rows = int(np.ceil(n_clusters / n_cols))

# # Create the figure and axis objects
# fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
#                        gridspec_kw={'wspace':0.6, 'hspace':0.5})
# ax = ax.flatten()
# plt.suptitle("post_im", fontsize=18, y=0.95)

# # Plot the histograms
# for i, label in enumerate(sorted(post_cluster['Cluster'].unique())):
#     cluster = post_cluster[post_cluster['Cluster'] == label]['post_im']
#     sns.histplot(cluster, ax=ax[i], kde=True, color='b')
#     ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
#     ax[i].set_xlabel("post_im")
#     ax[i].set_ylabel("Count")
# # Hide unused subplots
# for i in range(n_clusters, n_rows * n_cols):
#     ax[i].axis('off')

# # Show the plot
# plt.show()

ritm_cluster = df_pca_clusters[["ritm_ecg_p_01","Cluster"]]
n_clusters = len(ritm_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("ritm_ecg_p_01", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(ritm_cluster['Cluster'].unique())):
    cluster = ritm_cluster[ritm_cluster['Cluster'] == label]['ritm_ecg_p_01']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("ritm_ecg_p_01")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

npecg_cluster = df_pca_clusters[["n_p_ecg_p_12","Cluster"]]
n_clusters = len(npecg_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("n_p_ecg_p_12", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(npecg_cluster['Cluster'].unique())):
    cluster = npecg_cluster[npecg_cluster['Cluster'] == label]['n_p_ecg_p_12']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("n_p_ecg_p_12")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

# gipo_cluster = df_pca_clusters[["GIPO_K","Cluster"]]
# n_clusters = len(gipo_cluster['Cluster'].unique())
# n_cols = int(np.ceil(np.sqrt(n_clusters)))
# n_rows = int(np.ceil(n_clusters / n_cols))

# # Create the figure and axis objects
# fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
#                        gridspec_kw={'wspace':0.6, 'hspace':0.5})
# ax = ax.flatten()
# plt.suptitle("GIPO_K", fontsize=18, y=0.95)

# # Plot the histograms
# for i, label in enumerate(sorted(gipo_cluster['Cluster'].unique())):
#     cluster = gipo_cluster[gipo_cluster['Cluster'] == label]['GIPO_K']
#     sns.histplot(cluster, ax=ax[i], kde=True, color='b')
#     ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
#     ax[i].set_xlabel("GIPO_K")
#     ax[i].set_ylabel("Count")
# # Hide unused subplots
# for i in range(n_clusters, n_rows * n_cols):
#     ax[i].axis('off')

# # Show the plot
# plt.show()

kblood_cluster = df_pca_clusters[["K_BLOOD","Cluster"]]
n_clusters = len(kblood_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("K_BLOOD", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(kblood_cluster['Cluster'].unique())):
    cluster = kblood_cluster[kblood_cluster['Cluster'] == label]['K_BLOOD']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("K_BLOOD")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

nablood_cluster = df_pca_clusters[["NA_BLOOD","Cluster"]]
n_clusters = len(nablood_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("NA_BLOOD", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(nablood_cluster['Cluster'].unique())):
    cluster = nablood_cluster[nablood_cluster['Cluster'] == label]['NA_BLOOD']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("NA_BLOOD")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

ALT_BLOOD_cluster = df_pca_clusters[["ALT_BLOOD","Cluster"]]
n_clusters = len(ALT_BLOOD_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("ALT_BLOOD", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(ALT_BLOOD_cluster['Cluster'].unique())):
    cluster = ALT_BLOOD_cluster[ALT_BLOOD_cluster['Cluster'] == label]['ALT_BLOOD']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("ALT_BLOOD")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

AST_BLOOD_cluster = df_pca_clusters[["AST_BLOOD","Cluster"]]
n_clusters = len(AST_BLOOD_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("AST_BLOOD", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(AST_BLOOD_cluster['Cluster'].unique())):
    cluster = AST_BLOOD_cluster[AST_BLOOD_cluster['Cluster'] == label]['AST_BLOOD']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("AST_BLOOD")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

L_BLOOD_cluster = df_pca_clusters[["L_BLOOD","Cluster"]]
n_clusters = len(L_BLOOD_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("L_BLOOD", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(L_BLOOD_cluster['Cluster'].unique())):
    cluster = L_BLOOD_cluster[L_BLOOD_cluster['Cluster'] == label]['L_BLOOD']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("L_BLOOD")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

ROE_cluster = df_pca_clusters[["ROE","Cluster"]]
n_clusters = len(ROE_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("ROE", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(ROE_cluster['Cluster'].unique())):
    cluster = ROE_cluster[ROE_cluster['Cluster'] == label]['ROE']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("ROE")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

endocr_01_cluster = df_pca_clusters[["endocr_01","Cluster"]]
n_clusters = len(endocr_01_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("endocr_01", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(endocr_01_cluster['Cluster'].unique())):
    cluster = endocr_01_cluster[endocr_01_cluster['Cluster'] == label]['endocr_01']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("endocr_01")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

O_L_POST_cluster = df_pca_clusters[["O_L_POST","Cluster"]]
n_clusters = len(O_L_POST_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("O_L_POST", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(O_L_POST_cluster['Cluster'].unique())):
    cluster = O_L_POST_cluster[O_L_POST_cluster['Cluster'] == label]['O_L_POST']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("O_L_POST")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

IM_PG_P_cluster = df_pca_clusters[["IM_PG_P","Cluster"]]
n_clusters = len(IM_PG_P_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("IM_PG_P", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(IM_PG_P_cluster['Cluster'].unique())):
    cluster = IM_PG_P_cluster[IM_PG_P_cluster['Cluster'] == label]['IM_PG_P']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("IM_PG_P")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

TIME_B_S_cluster = df_pca_clusters[["TIME_B_S","Cluster"]]
n_clusters = len(TIME_B_S_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("TIME_B_S", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(TIME_B_S_cluster['Cluster'].unique())):
    cluster = TIME_B_S_cluster[TIME_B_S_cluster['Cluster'] == label]['TIME_B_S']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("TIME_B_S")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

NA_KB_cluster = df_pca_clusters[["NA_KB","Cluster"]]
n_clusters = len(NA_KB_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("NA_KB", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(NA_KB_cluster['Cluster'].unique())):
    cluster = NA_KB_cluster[NA_KB_cluster['Cluster'] == label]['NA_KB']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("NA_KB")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

NITR_S_cluster = df_pca_clusters[["NITR_S","Cluster"]]
n_clusters = len(NITR_S_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("NITR_S", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(NITR_S_cluster['Cluster'].unique())):
    cluster = NITR_S_cluster[NITR_S_cluster['Cluster'] == label]['NITR_S']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("NITR_S")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

NA_R_1_n_cluster = df_pca_clusters[["NA_R_1_n","Cluster"]]
n_clusters = len(NA_R_1_n_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("NA_R_1_n", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(NA_R_1_n_cluster['Cluster'].unique())):
    cluster = NA_R_1_n_cluster[NA_R_1_n_cluster['Cluster'] == label]['NA_R_1_n']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("NA_R_1_n")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

ANT_CA_S_n_cluster = df_pca_clusters[["ANT_CA_S_n","Cluster"]]
n_clusters = len(ANT_CA_S_n_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("ANT_CA_S_n", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(ANT_CA_S_n_cluster['Cluster'].unique())):
    cluster = ANT_CA_S_n_cluster[ANT_CA_S_n_cluster['Cluster'] == label]['ANT_CA_S_n']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("ANT_CA_S_n")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

ASP_S_n_cluster = df_pca_clusters[["ASP_S_n","Cluster"]]
n_clusters = len(ASP_S_n_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("ASP_S_n", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(ASP_S_n_cluster['Cluster'].unique())):
    cluster = ASP_S_n_cluster[ASP_S_n_cluster['Cluster'] == label]['ASP_S_n']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("ASP_S_n")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

RAZRIV_cluster = df_pca_clusters[["RAZRIV","Cluster"]]
n_clusters = len(RAZRIV_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("RAZRIV", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(RAZRIV_cluster['Cluster'].unique())):
    cluster = RAZRIV_cluster[RAZRIV_cluster['Cluster'] == label]['RAZRIV']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("RAZRIV")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

ZSN_cluster = df_pca_clusters[["ZSN","Cluster"]]
n_clusters = len(ZSN_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("ZSN", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(ZSN_cluster['Cluster'].unique())):
    cluster = ZSN_cluster[ZSN_cluster['Cluster'] == label]['ZSN']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("ZSN")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

REC_IM_cluster = df_pca_clusters[["REC_IM","Cluster"]]
n_clusters = len(REC_IM_cluster['Cluster'].unique())
n_cols = int(np.ceil(np.sqrt(n_clusters)))
n_rows = int(np.ceil(n_clusters / n_cols))

# Create the figure and axis objects
fig, ax = plt.subplots(n_rows, n_cols, figsize=(10, 8),
                       gridspec_kw={'wspace':0.6, 'hspace':0.5})
ax = ax.flatten()
plt.suptitle("REC_IM", fontsize=18, y=0.95)

# Plot the histograms
for i, label in enumerate(sorted(REC_IM_cluster['Cluster'].unique())):
    cluster = REC_IM_cluster[REC_IM_cluster['Cluster'] == label]['REC_IM']
    sns.histplot(cluster, ax=ax[i], kde=True, color='b')
    ax[i].set_title(f'cluster {int (label)} ({len(cluster)} instances)')
    ax[i].set_xlabel("REC_IM")
    ax[i].set_ylabel("Count")
# Hide unused subplots
for i in range(n_clusters, n_rows * n_cols):
    ax[i].axis('off')

# Show the plot
plt.show()

most_relevant_features = [['AGE', 'S_AD_ORIT', 'D_AD_ORIT', 'K_BLOOD', 'NA_BLOOD', 'ALT_BLOOD','AST_BLOOD', 'L_BLOOD', 'ROE',
                           'INF_ANAM', 'STENOK_AN', 'FK_STENOK',
       'IBS_POST', 'GB', 'DLIT_AG', 'ZSN_A', 'endocr_01', 'O_L_POST',
       'K_SH_POST', 'ant_im', 'lat_im', 'inf_im', 'IM_PG_P', 'ritm_ecg_p_01',
       'n_p_ecg_p_12', 'TIME_B_S', 'NA_KB', 'NITR_S', 'NA_R_1_n', 'ANT_CA_S_n',
       'ASP_S_n', 'RAZRIV', 'ZSN', 'REC_IM']]
most_relevant_features

"""#Statistical Analysis of 0th cluster"""

df_dist = df_with_clusters.loc[(df_with_clusters.Cluster==0),['AGE', 'S_AD_ORIT', 'D_AD_ORIT', 'K_BLOOD', 'NA_BLOOD', 'ALT_BLOOD','AST_BLOOD', 'L_BLOOD', 'ROE',
                           'INF_ANAM', 'STENOK_AN', 'FK_STENOK',
       'IBS_POST', 'GB', 'DLIT_AG', 'ZSN_A', 'endocr_01', 'O_L_POST',
       'K_SH_POST', 'ant_im', 'lat_im', 'inf_im', 'IM_PG_P', 'ritm_ecg_p_01',
       'n_p_ecg_p_12', 'TIME_B_S', 'NA_KB', 'NITR_S', 'NA_R_1_n', 'ANT_CA_S_n',
       'ASP_S_n', 'RAZRIV', 'ZSN', 'REC_IM']]

num_relevant_features = df_dist[['AGE', 'S_AD_ORIT', 'D_AD_ORIT', 'K_BLOOD', 'NA_BLOOD','ALT_BLOOD','AST_BLOOD','L_BLOOD','ROE']]
num_relevant_features

cat_relevant_features = df_dist[['INF_ANAM', 'STENOK_AN', 'FK_STENOK',
       'IBS_POST', 'GB', 'DLIT_AG', 'ZSN_A', 'endocr_01', 'O_L_POST',
       'K_SH_POST', 'ant_im', 'lat_im', 'inf_im', 'IM_PG_P', 'ritm_ecg_p_01',
       'n_p_ecg_p_12', 'TIME_B_S', 'NA_KB', 'NITR_S', 'NA_R_1_n', 'ANT_CA_S_n',
       'ASP_S_n', 'RAZRIV', 'ZSN', 'REC_IM']]

zero_cluster_num = num_relevant_features.describe()
zero_cluster_num

print(' ')
for i in list(cat_relevant_features.columns):
    print(cat_relevant_features[[i]].value_counts())
    print('--------------------------------------')
    print(' ')

"""#Statistics of 1st cluster"""

df_dist = df_with_clusters.loc[(df_with_clusters.Cluster==1),
                      ['AGE', 'S_AD_ORIT', 'D_AD_ORIT', 'K_BLOOD', 'NA_BLOOD', 'ALT_BLOOD','AST_BLOOD', 'L_BLOOD', 'ROE',
                      'INF_ANAM', 'STENOK_AN', 'FK_STENOK',
                      'IBS_POST', 'GB', 'DLIT_AG', 'ZSN_A',
                       'endocr_01', 'O_L_POST','K_SH_POST', 'ant_im', 'lat_im', 'inf_im',
                       'IM_PG_P', 'ritm_ecg_p_01','n_p_ecg_p_12', 'TIME_B_S',
                       'NA_KB', 'NITR_S', 'NA_R_1_n', 'ANT_CA_S_n',
                       'ASP_S_n', 'RAZRIV', 'ZSN', 'REC_IM']]
df_dist

num_relevant_features1 = df_dist[['AGE', 'S_AD_ORIT', 'D_AD_ORIT', 'K_BLOOD', 'NA_BLOOD','ALT_BLOOD','AST_BLOOD','L_BLOOD','ROE']]
num_relevant_features1

first_cluster_num = num_relevant_features1.describe()
first_cluster_num

cat_relevant_features1 = df_dist[[ 'INF_ANAM', 'STENOK_AN', 'FK_STENOK',
       'IBS_POST', 'GB', 'DLIT_AG', 'ZSN_A', 'endocr_01', 'O_L_POST',
       'K_SH_POST', 'ant_im', 'lat_im', 'inf_im', 'IM_PG_P', 'ritm_ecg_p_01',
       'n_p_ecg_p_12', 'TIME_B_S', 'NA_KB', 'NITR_S', 'NA_R_1_n', 'ANT_CA_S_n',
       'ASP_S_n', 'RAZRIV', 'ZSN', 'REC_IM']]

print(' ')
for i in list(cat_relevant_features1.columns):
    print(cat_relevant_features1[[i]].value_counts())
    print('--------------------------------------')
    print(' ')

"""#Statistical Analysis of Second cluster"""

df_dist2 = df_with_clusters.loc[(df_with_clusters.Cluster==2),['AGE', 'S_AD_ORIT', 'D_AD_ORIT', 'K_BLOOD', 'NA_BLOOD', 'ALT_BLOOD','AST_BLOOD', 'L_BLOOD', 'ROE',
                           'INF_ANAM', 'STENOK_AN', 'FK_STENOK',
       'IBS_POST', 'GB', 'DLIT_AG', 'ZSN_A', 'endocr_01', 'O_L_POST',
       'K_SH_POST', 'ant_im', 'lat_im', 'inf_im', 'IM_PG_P', 'ritm_ecg_p_01',
       'n_p_ecg_p_12', 'TIME_B_S', 'NA_KB', 'NITR_S', 'NA_R_1_n', 'ANT_CA_S_n',
       'ASP_S_n', 'RAZRIV', 'ZSN', 'REC_IM']]

num_relevant_features2 = df_dist2[['AGE', 'S_AD_ORIT', 'D_AD_ORIT', 'K_BLOOD', 'NA_BLOOD','ALT_BLOOD','AST_BLOOD','L_BLOOD','ROE']]
num_relevant_features2

second_cluster_num = num_relevant_features2.describe()
second_cluster_num

cat_relevant_features2 = df_dist2[['INF_ANAM', 'STENOK_AN', 'FK_STENOK',
       'IBS_POST', 'GB', 'DLIT_AG', 'ZSN_A', 'endocr_01', 'O_L_POST',
       'K_SH_POST', 'ant_im', 'lat_im', 'inf_im', 'IM_PG_P', 'ritm_ecg_p_01',
       'n_p_ecg_p_12', 'TIME_B_S', 'NA_KB', 'NITR_S', 'NA_R_1_n', 'ANT_CA_S_n',
       'ASP_S_n', 'RAZRIV', 'ZSN', 'REC_IM']]

print(' ')
for i in list(cat_relevant_features2.columns):
    print(cat_relevant_features2[[i]].value_counts())
    print('--------------------------------------')
    print(' ')

"""#Statistical Analysis of Third Cluster"""

df_dist3 = df_with_clusters.loc[(df_with_clusters.Cluster==3),
       ['AGE', 'S_AD_ORIT', 'D_AD_ORIT', 'K_BLOOD',
      'NA_BLOOD', 'ALT_BLOOD','AST_BLOOD', 'L_BLOOD', 'ROE',
      'INF_ANAM', 'STENOK_AN', 'FK_STENOK','IBS_POST', 'GB',
       'DLIT_AG', 'ZSN_A', 'endocr_01', 'O_L_POST','K_SH_POST',
       'ant_im', 'lat_im', 'inf_im', 'IM_PG_P', 'ritm_ecg_p_01',
       'n_p_ecg_p_12', 'TIME_B_S', 'NA_KB', 'NITR_S', 'NA_R_1_n',
       'ANT_CA_S_n','ASP_S_n', 'RAZRIV', 'ZSN', 'REC_IM']]

cat_relevant_features3 = df_dist3[['INF_ANAM', 'STENOK_AN', 'FK_STENOK',
       'IBS_POST', 'GB', 'DLIT_AG', 'ZSN_A', 'endocr_01', 'O_L_POST',
       'K_SH_POST', 'ant_im', 'lat_im', 'inf_im', 'IM_PG_P', 'ritm_ecg_p_01',
       'n_p_ecg_p_12', 'TIME_B_S', 'NA_KB', 'NITR_S', 'NA_R_1_n', 'ANT_CA_S_n',
       'ASP_S_n', 'RAZRIV', 'ZSN', 'REC_IM']]

print(' ')
for i in list(cat_relevant_features3.columns):
    print(cat_relevant_features3[[i]].value_counts())
    print('--------------------------------------')
    print(' ')

print("Analysis of Numerical Attributes")

num_relevant_features3 = df_dist3[['AGE', 'S_AD_ORIT', 'D_AD_ORIT', 'K_BLOOD', 'NA_BLOOD','ALT_BLOOD','AST_BLOOD','L_BLOOD','ROE']]
third_cluster_num = num_relevant_features3.describe()
third_cluster_num

"""# Statistical Analysis of fourth Cluster"""

df_dist4 = df_with_clusters.loc[(df_with_clusters.Cluster==4),
       ['AGE', 'S_AD_ORIT', 'D_AD_ORIT', 'K_BLOOD',
      'NA_BLOOD', 'ALT_BLOOD','AST_BLOOD', 'L_BLOOD', 'ROE',
      'INF_ANAM', 'STENOK_AN', 'FK_STENOK','IBS_POST', 'GB',
       'DLIT_AG', 'ZSN_A', 'endocr_01', 'O_L_POST','K_SH_POST',
       'ant_im', 'lat_im', 'inf_im', 'IM_PG_P', 'ritm_ecg_p_01',
       'n_p_ecg_p_12', 'TIME_B_S', 'NA_KB', 'NITR_S', 'NA_R_1_n',
       'ANT_CA_S_n','ASP_S_n', 'RAZRIV', 'ZSN', 'REC_IM']]

cat_relevant_features4 = df_dist4[['INF_ANAM', 'STENOK_AN', 'FK_STENOK',
       'IBS_POST', 'GB', 'DLIT_AG', 'ZSN_A', 'endocr_01', 'O_L_POST',
       'K_SH_POST', 'ant_im', 'lat_im', 'inf_im', 'IM_PG_P', 'ritm_ecg_p_01',
       'n_p_ecg_p_12', 'TIME_B_S', 'NA_KB', 'NITR_S', 'NA_R_1_n', 'ANT_CA_S_n',
       'ASP_S_n', 'RAZRIV', 'ZSN', 'REC_IM']]

print(' ')
for i in list(cat_relevant_features4.columns):
    print(cat_relevant_features4[[i]].value_counts())
    print('--------------------------------------')
    print(' ')

print("Analysis of Numerical Attributes")
